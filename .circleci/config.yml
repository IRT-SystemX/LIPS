version: 2.1

references:
  dep_key: &dep_key
              deps4-{{ .Branch }}-{{ checksum "requirements.txt" }}

executors:
  docker-executor:
    docker:
      - image: cimg/python:3.8.1

commands:

  build:
    description: "build all the dependencies"
    steps:
      - checkout
      - run: sudo chown -R circleci:circleci /usr/local/bin
      - restore_cache_dep
      - run:
          name: Install and activate virtual environment with pip
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip install --upgrade pip
            pip install -U .[test]
            pip install nbmake pytest-xdist
      - change_owner
      - save_cache_dep

  activate_venv:
    description: "activate virtual environment"
    steps:
      - run: . venv/bin/activate

  restore_cache_dep:
    description: "restore build caches"
    steps:
      - restore_cache:
          key: *dep_key

  save_cache_dep:
    description: "save build caches"
    steps:
      - save_cache:
          key: *dep_key
          paths:
            - "venv"

  store_artifacts_test_results:
    description: "Upload test summary for display"
    steps:
      - store_test_results:
          path: test-results
      - store_artifacts:
          path: test-results
          destination: tr1

  change_owner:
    description: "change owner before saving cache"
    steps:
      - run: sudo chown -R circleci:circleci ./venv/bin
      - run: sudo chown -R circleci:circleci ./venv/lib/python3.8/site-packages

jobs:
  build_dep:
    executor: docker-executor
    steps:
      - build

  run_python_tests:
    executor: docker-executor
    steps:
      - checkout
      - restore_cache_dep
      - run:
          name: "run pytest"
          command: |
            . venv/bin/activate
            python -m pytest ./lips --html=test-results/pytest_report.html --self-contained-html
      - store_artifacts_test_results

  run_notebook_test:
    executor: docker-executor
    steps:
      - checkout
      - restore_cache_dep
      - run:
          name: "run pytest"
          command: |
            . venv/bin/activate
            python -m ipykernel install --user --name "venv"
            jupytext ./getting_started/*.ipynb --update-metadata '{"execution" : {"allow_errors": true, "timeout":300}}'
            jupytext ./getting_started/*.ipynb --update-metadata '{"kernelspec": {"name": "venv", "display_name": "venv", "language": "python"}}'
            # jupytext ./getting_started/*.ipynb --update-metadata '{"kernelspec":null}'
            # jupytext ./getting_started/*.ipynb --update-metadata '{"kernelspec":{}}'
            python -m pytest --nbmake -n=auto ./getting_started --ignore=./getting_started/01_GenerateData.ipynb \
                                                                --ignore=./getting_started/02_EvaluateBaseline.ipynb \
                                                                --ignore=./getting_started/03_TrainAnAugmentedSimulator.ipynb \
                                                                --ignore=./getting_started/04_Complete_example.ipynb \
                                                                --ignore=./getting_started/auxiliary/06_NIPS_environment.ipynb \
                                                                --ignore=./getting_started/auxiliary/07_Complete_example_Nips_Track1.ipynb \
                                                                --ignore=./getting_started/auxiliary/EvaluateDC.ipynb
      - store_artifacts_test_results

  run_pylint:
    executor: docker-executor
    steps:
      - checkout
      - restore_cache_dep
      - run:
          command: |
            . venv/bin/activate
            pylint $(git ls-files '*.py')  || pylint-exit $?
            if [ $? -ne 0 ]; then
              echo "An error occurred while running pylint." >&2
              exit 1
            fi

  generate_doc:
    executor: docker-executor
    steps:
      - checkout
      - restore_cache_dep
      - run:
          name: "Generate documentation"
          command: |
            . venv/bin/activate
            sphinx-apidoc -f -o docs/source lips

  docs_build:
    executor: docker-executor
    steps:
      - checkout
      - restore_cache_dep
      - run:
          name: "Build docs"
          command: |
            . venv/bin/activate
            cd docs/ && make html
            ls
      - persist_to_workspace:
          root: ./docs/build
          paths: html

  docs_deploy:
    docker:
      - image: cimg/node:17.8.0
    steps:
      - checkout
      - attach_workspace:
          at: ./docs/build
      - run:
          name: Install and configure dependencies
          command: |
            npm install -g --silent gh-pages@3.0.0
            git config user.email "mleyliabadi@gmail.com"
            git config user.name "mleyliabadi"
      - add_ssh_keys:
          fingerprints:
            - "c5:f1:b9:b9:fb:c4:fe:1f:b0:35:ba:e0:35:fb:20:6a"
      - run:
          name: Deploy docs to gh-pages branch
          command: gh-pages --dotfiles --message "[skip ci] Updates" --dist ./docs/build/html

  run_tmp:
    description: "TO BE REMOVED, FOR DEBUGGING"
    executor: docker-executor
    steps:
      - checkout
      - run:
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip list
            which python
      - run: pip list
      - run: which python


workflows:
  version: 2
  build_and_test:
    jobs:
    - build_dep:
        filters:
          branches:
            ignore:
              - gh-pages

    - run_python_tests:
        requires:
          - build_dep
        filters:
          branches:
            ignore:
              - gh-pages

    - run_notebook_test:
        requires:
          - run_python_tests
        filters:
          branches:
            ignore:
              - gh-pages

    - generate_doc:
        requires:
          - run_python_tests
        filters:
          branches:
            ignore:
              - gh-pages

    - docs_build:
        requires:
          - generate_doc
        filters:
          branches:
            ignore:
              - gh-pages

    - docs_deploy:
        requires:
          - docs_build
        filters:
          branches:
            ignore:
              - gh-pages
